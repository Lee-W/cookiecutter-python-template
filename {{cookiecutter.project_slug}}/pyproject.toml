[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "$version"
{% if cookiecutter.dependency_management_tool=='poetry' -%}
version_files = [
    "pyproject.toml:version"
]
{%- endif %}


[tool.ruff]
line-length = 88
ignore = [
    "E501",
    "D1",
    "D415",
]

[tool.ruff.isort]
known-first-party = ["tests"]

[tool.ruff.pydocstyle]
convention = "google"


[tool.mypy]
files = [
    "{{ cookiecutter.project_slug }}",
    "tests"
]
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
{% if cookiecutter.use_strict_mypy_config == 'y' -%}
    [[tool.mypy.overrides]]
    module = ["{{ cookiecutter.project_slug }}.*"]
    # Ensure full coverage
    disallow_untyped_calls = true
    disallow_untyped_defs = true
    disallow_incomplete_defs = true
    disallow_untyped_decorators = true
    # Restrict dynamic typing
    disallow_any_generics = true
    disallow_subclassing_any = true
    warn_return_any = true

    [[tool.mypy.overrides]]
    module = ["tests.*"]
    disallow_untyped_defs = false
    disallow_untyped_decorators = false
{%- endif %}


[tool.pytest.ini_options]
minversion = "7.2.0"
testpaths = "tests"
addopts = "--strict-markers"
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv",
    "env",
    "virtualenv"
]


[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        'pragma: no cover',

        # Don't complain about missing debug-only code:
        'def __repr__',
        'if self\.debug',

        # Don't complain if tests don't hit defensive assertion code:
        'raise AssertionError',
        'raise NotImplementedError',

        # Don't complain if non-runnable code isn't run:
        'if 0:',
        'if __name__ == .__main__.:'
    ]
    omit = [
        'env/*',
        'venv/*',
        '*/virtualenv/*',
        '*/virtualenvs/*',
        '*/tests/*'
    ]

{% if cookiecutter.dependency_management_tool=='poetry' -%}
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "0.0.1"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
description = "{{ cookiecutter.project_description }}"
license = "{{ cookiecutter.open_source_license }}"
readme = "docs/README.md"
repository = "{{ cookiecutter.github_url }}"

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.dev-dependencies]
# task management
invoke = "^2.1.3"
# test
pytest = "^7.2.0"
pytest-cov = "^2.8.1"
pytest-mock = "^3.0.0"
pytest-xdist = "^1.31.0"
hypothesis = "^5.8.0"
coverage = {extras = ["toml"], version = "^5.0.4"}
# style
ruff = "^0.0.262"
mypy = "^1.4"
black = ">=22.10.0"
# security
bandit = "^1.6.2"
pip-audit = "^2.4.5"
# git
commitizen = "^3.0.0"
pre-commit = "^2.2.0"
# documentation
mkdocs = "^1.1"
mkdocs-material = "^7.0.6"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{%- endif %}
