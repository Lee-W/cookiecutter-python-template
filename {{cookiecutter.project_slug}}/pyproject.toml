{% if cookiecutter.dependency_management_tool == "poetry" -%}
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "0.0.1"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
description = "{{ cookiecutter.project_description }}"
license = "{{ cookiecutter.open_source_license }}"
readme = "docs/README.md"
repository = "{{ cookiecutter.github_url }}"
package-mode = {% if cookiecutter.build_pypi_package %}true{% else %}false{% endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
invoke = "^{{ cookiecutter._package_versions.invoke }}"

[tool.poetry.group.test.dependencies]
pytest = "^{{ cookiecutter._package_versions.pytest }}"
pytest-cov = "^{{ cookiecutter._package_versions.pytest_cov }}"
pytest-mock = "^{{ cookiecutter._package_versions.pytest_mock }}"
coverage = { extras = ["toml"], version = "^{{ cookiecutter._package_versions.coverage }}" }

[tool.poetry.group.style.dependencies]
ruff = "^{{ cookiecutter._package_versions.ruff }}"
mypy = "^{{ cookiecutter._package_versions.mypy }}"

[tool.poetry.group.security.dependencies]
bandit = "^{{ cookiecutter._package_versions.bandit }}"
pip-audit = "^{{ cookiecutter._package_versions.pip_audit }}"

[tool.poetry.group.git.dependencies]
commitizen = "^{{ cookiecutter._package_versions.commitizen }}"
pre-commit = "^{{ cookiecutter._package_versions.pre_commit }}"

[tool.poetry.group.doc.dependencies]
mkdocs = "^{{ cookiecutter._package_versions.mkdocs }}"
mkdocs-material = "^{{ cookiecutter._package_versions.mkdocs_material }}"
{% elif cookiecutter.dependency_management_tool == "uv" -%}
[project]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
description = "{{ cookiecutter.project_description }}"
license = {file = "LICENSE"}
readme = "docs/README.md"
requires-python = ">={{ cookiecutter.python_version }}"

[dependency-groups]
dev = [
    "invoke>={{ cookiecutter._package_versions.invoke }}",
]
test = [
    "coverage[toml]>={{ cookiecutter._package_versions.coverage }}",
    "pytest>={{ cookiecutter._package_versions.pytest }}",
    "pytest-cov>={{ cookiecutter._package_versions.pytest_cov }}",
    "pytest-mock>={{ cookiecutter._package_versions.pytest_mock }}",
]
style = [
    "mypy>={{ cookiecutter._package_versions.mypy }}",
    "ruff>={{ cookiecutter._package_versions.ruff }}",
]
security = [
    "bandit>={{ cookiecutter._package_versions.bandit }}",
    "pip-audit>={{ cookiecutter._package_versions.pip_audit }}",
]
git = [
    "commitizen>={{ cookiecutter._package_versions.commitizen }}",
    "pre-commit>={{ cookiecutter._package_versions.pre_commit }}",
]
doc = [
    "mkdocs>={{ cookiecutter._package_versions.mkdocs }}",
    "mkdocs-material>={{ cookiecutter._package_versions.mkdocs_material }}",
]
{%- endif %}

{% if cookiecutter.build_pypi_package -%}
[build-system]
{% if cookiecutter.dependency_management_tool == "poetry" -%}
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
{% elif cookiecutter.dependency_management_tool == "uv" -%}
requires = ["hatchling"]
build-backend = "hatchling.build"
{%- endif %}
{%- endif %}

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "$version"
version_files = ["pyproject.toml:version"]


[tool.mypy]
files = ["{{ cookiecutter.project_slug }}", "tests"]
ignore_missing_imports = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_untyped_decorators = false
{% if cookiecutter.use_strict_mypy_config -%}
# Ensure full coverage
disallow_untyped_calls = true
disallow_incomplete_defs = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
{%- endif %}


[tool.ruff]
line-length = 110

[tool.ruff.lint]
extend-select = [
    "I",     # Missing required import (auto-fixable)
    "UP",    # Pyupgrade
    "PT",    # flake8-pytest-style rules
    "TID25", # flake8-tidy-imports rules
]

ignore = ["E501", "D1", "D415"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
known-first-party = ["tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pytest.ini_options]
minversion = "8.0.0"
testpaths = "tests"
addopts = "--strict-markers"
norecursedirs = [
    ".*",
    "build",
    "dist",
    "CVS",
    "_darcs",
    "{arch}",
    "*.egg",
    "venv",
    "env",
    "virtualenv",
]


[tool.coverage]
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',

    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',

    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
]
omit = ['env/*', 'venv/*', '*/virtualenv/*', '*/virtualenvs/*', '*/tests/*']
